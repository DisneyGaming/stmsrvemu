import struct
import socket

import globalvars
from steam3.Types.MessageObject import MessageObject
from steam3.Types.MessageObject.MachineID import MachineID
from steam3.utilities import reverse_bytes, uint32_to_time
from utilities import ticket_utils


class ClientLogOnWithCredentials_Deprecated:
    def __init__(self, data):
        self.data = data
        self.is333 = False
        self.steamui_version = 0
        if globalvars.steamui_ver >= 333 and globalvars.steamui_ver <=382:
            self.parse_v333()
            self.is333 = True
        else:
            self.parse_v457()

    def parse_v333(self):
        offset = 0
        self.protocol, = struct.unpack_from('<I', self.data, offset)
        offset += 4

        self.obfuscated_ip, = struct.unpack_from('<I', self.data, offset)
        self.obfuscated_ip = socket.inet_ntoa(int.to_bytes(reverse_bytes(self.obfuscated_ip ^ 0xBAADF00D), length = 4, byteorder = "little"))
        offset += 4

        self.public_ip, = struct.unpack_from('<I', self.data, offset)
        offset += 4

        self.logon_cookie, = struct.unpack_from('<Q', self.data, offset)
        offset += 8

        self.ticket_length, = struct.unpack_from('<I', self.data, offset)
        offset += 4

        username_end = self.data.find(b'\x00', offset)
        self.username = self.data[offset:username_end].decode('ascii')
        offset += 64

        password_end = self.data.find(b'\x00', offset)
        self.password = self.data[offset:password_end].decode('ascii')
        offset += 20

        self.qos_level, = struct.unpack_from('<I', self.data, offset)
        offset += 4

        ticket = self.data[offset:offset + self.ticket_length]
        offset += self.ticket_length

        self.ticket = ticket_utils.Steam2Ticket(ticket[4:])

        email_end = self.data.find(b'\x00', offset)
        self.email = self.data[offset:email_end].decode('ascii')
        offset = email_end + 1

        language_end = self.data.find(b'\x00', offset)
        self.language = self.data[offset:language_end].decode('ascii')
        offset = language_end + 1

        self.account_creation_time, = struct.unpack_from('<I', self.data, offset)
        self.account_creation_time = uint32_to_time(int.to_bytes(self.account_creation_time, length = 4, byteorder = "little"))


    def parse_v457(self):
        offset = 0
        self.protocol, = struct.unpack_from('<I', self.data, offset)
        offset += 4

        self.obfuscated_ip, = struct.unpack_from('<I', self.data, offset)
        self.obfuscated_ip = socket.inet_ntoa(int.to_bytes(reverse_bytes(self.obfuscated_ip ^ 0xBAADF00D), length = 4, byteorder = "little"))
        offset += 4

        self.public_ip, = struct.unpack_from('<I', self.data, offset)
        offset += 4

        self.logon_cookie, = struct.unpack_from('<Q', self.data, offset)
        offset += 8

        self.ticket_length, = struct.unpack_from('<I', self.data, offset)
        offset += 4

        username_end = self.data.find(b'\x00', offset)
        self.username = self.data[offset:username_end].decode('ascii')
        offset += 64

        password_end = self.data.find(b'\x00', offset)
        self.password = self.data[offset:password_end].decode('ascii')
        offset += 20

        self.qos_level, = struct.unpack_from('<I', self.data, offset)
        offset += 4

        ticket = self.data[offset:offset + self.ticket_length]
        offset += self.ticket_length

        self.ticket = ticket_utils.Steam2Ticket(ticket[4:])

        email_end = self.data.find(b'\x00', offset)
        self.email = self.data[offset:email_end].decode('ascii')
        offset = email_end + 1

        language_end = self.data.find(b'\x00', offset)
        self.language = self.data[offset:language_end].decode('ascii')
        offset = language_end + 1

        self.account_creation_time, = struct.unpack_from('<I', self.data, offset)
        self.account_creation_time = uint32_to_time(int.to_bytes(self.account_creation_time, length = 4, byteorder = "little"))
        offset += 4

        self.unknown1, = struct.unpack_from('<I', self.data, offset)
        offset += 4

        if self.protocol < 65555: # missing machineID 02/2009 49/770
            # Assuming MachineID is another class that needs the rest of the data
            self.machine_id = MessageObject(self.data[offset:])
            self.machine_id.parse()
            index = self.data.find(b"\x08\x08", offset)
            if index == -1:
                raise ValueError("MachineID sequence not found")
            offset = index + 2

        if self.protocol >= 65552 and globalvars.steamui_ver >= 410:
            # Protocol version 65552 is missing steamui versionin in its early versions
            version_set_flag = 1
            if self.protocol >= 65554:
                version_set_flag, = struct.unpack_from('<I', self.data, offset)
                offset += 4

            if bool(version_set_flag):
                self.steamui_version, = struct.unpack_from('<I', self.data, offset)
                offset += 4

            if self.protocol >= 65554:
                self.cellid, = struct.unpack_from('<I', self.data, offset)
                offset += 4
                if self.protocol >= 65555:
                    self.last_sessionID, = struct.unpack_from('<I', self.data, offset)
                    offset += 4
                    if self.protocol >= 65558:
                        self.remember_password, = struct.unpack_from('<H', self.data, offset)
                        offset += 2

        else:
            self.steamui_version = 0

    def __str__(self):
        if self.is333:
            return str({
                "protocol": self.protocol,
                "obfuscated_ip": self.obfuscated_ip,
                "public_ip": self.public_ip,
                "logon_cookie": self.logon_cookie,
                "ticket_length": self.ticket_length,
                "ticket": self.ticket,
                "username": self.username,
                "password": self.password,
                "qoslevel": self.qos_level,
                "email": self.email,
                "language": self.language,
                "account_creation_time": self.account_creation_time,
                #"unknown2": self.unknown2,
                #"steamui_version": self.steamui_version,
            })

        else:
            if self.protocol >= 65552:

                ret_str = {
                        "protocol":             self.protocol,
                        "obfuscated_ip":        self.obfuscated_ip,  # tinserver does this: IP^0xBAADF00D
                        "public_ip":            self.public_ip,
                        "logon_cookie":         self.logon_cookie,
                        "ticket_length":        self.ticket_length,
                        "ticket":               self.ticket,
                        "username":             self.username,
                        "password":             self.password,
                        "qoslevel":             self.qos_level,
                        "email":                self.email,
                        "language":             self.language,
                        "account_creation_time":self.account_creation_time,
                        "unknown1":             self.unknown1,
                        "steamui_version":      self.steamui_version,
                }

                if self.protocol < 65555:
                    message_objects = self.machine_id.get_message_objects()
                    obj = message_objects[0]
                    # Debugging output
                    # print(f"Debug: MachineID objects: {message_objects}")

                    ret_str["MachineID"] = {
                            "BB3":obj.get('BB3', 'N/A'),
                            "FF2":obj.get('FF2', 'N/A'),
                            "3B3":obj.get('3B3', 'N/A'),
                    }

                if self.protocol >= 65554:
                    ret_str["cellid"] = self.cellid
                    if self.protocol >= 65555:
                        ret_str["last_sessionID"] = self.last_sessionID
                        if self.protocol >= 65558:
                            ret_str["RememberPassword"] = self.remember_password

                return str(ret_str)


# all clients after 452 use this packet :
#packetid: 803
# protocol 65554:
# b'\x12\x00\x01\x00\xca\x1c*\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x01\x00\x00ben\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0012345\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb4\x03\xa8\xc0\x00\x02\x00\x80benben\x00\x01\xb4\x03\xa8\xc0\xc0\xa8\x03\xb4\xc0\xa8\x03\xb4\xa0i\xc0\xa8\x03\xb4\xa0i\xa8\xf6\xbd\x12\xa8\xa1\x94\x83\xd9\x8fro\xa0\xa1\x1d\x86\xc0\x044\xd4\x7f\xde\xe2\x00\xc0z\x11\x16\x81\xde\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x8d\xdf6\xa3\xba\x976\xd77\xe0\xd3\x90\x11`2\x00R\x00`\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x00\xc0\xa8\x03\xb4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
# test@test.com\x00
# english\x00
# YZ\x85f
# \x01\x00\x00\x00
# \x00MessageObject\x00\x01BB3\x00387ed8b244a0c99aab64119d66f0db4a8593dc26\x00\x01FF2\x0087ce1a824ea141c06df26adf5f9d811cdb037a68\x00\x013B3\x00b76a275db8d12c34fbaa6a4d87afe375ce048800\x00\x08\x08
# \x01\x00\x00\x00
# \x9d\x02\x00\x00
# \x00\x00\x00\x00'

# protocol 65555:
# b'\x13\x00\x01\x00\xca\x1c*\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x01\x00\x00ben\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0012345\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb4\x03\xa8\xc0\x00\x02\x00\x80benben\x00\x01\xb4\x03\xa8\xc0\xc0\xa8\x03\xb4\xc0\xa8\x03\xb4\xa0i\xc0\xa8\x03\xb4\xa0i\xa8\xf6\xbd\x12\xa8\xa1\x94\x83\xd9\x8fro\xa0\xa1\x1d\x86\x80\xca[.\x91\xde\xe2\x00\x80@9p\x92\xde\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\7\x85(\x04_^lw\xee\xd3\xa0\x8ew\x1f\xb1\x00R\x00`\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x00\xc0\xa8\x03\xb4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
# test@test.com\x00
# english\x00
# YZ\x85f
# \x01\x00\x00\x00
# \x00MessageObject\x00\x01BB3\x00387ed8b244a0c99aab64119d66f0db4a8593dc26\x00\x01FF2\x0087ce1a824ea141c06df26adf5f9d811cdb037a68\x00\x013B3\x00b76a275db8d12c34fbaa6a4d87afe375ce048800\x00\x08\x08
# \x01\x00\x00\x00
# \xca\x02\x00\x00
# \x00\x00\x00\x00
# \x00\x00\x00\x00'

# protocol 65556: v 838 is last version
"""test = (b'\x14\x00\x01\x00'
b'\xca\x1c'
b'*\xf2'
b'\x00\x00\x00\x00\x00\x00\x00\x00'
b'\x00\x00\x00\x00'
b'\x8a\x01\x00\x00'
b'ben\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
b'12345\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
b'\xb4\x03\xa8\xc0\x00\x02\x00\x80benben\x00\x01\xb4\x03\xa8\xc0\xc0\xa8\x03\xb4\xc0\xa8\x03\xb4\xa0i\xc0\xa8\x03\xb4\xa0i\xa8\xf6\xbd\x12\xa8\xa1\x94\x83\xd9\x8fro\xa0\xa1\x1d\x86\xc0\xd1\x8a\xfb\x7f\xde\xe2\x00\xc0Gh=\x81\xde\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\xfa\xc0\xc9K\xa4\xea\x89\x8e\xa4+WYj\xbc\x0c\x00R\x00`\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x00\xc0\xa8\x03\xb4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
b'0test@test.com\x00'
b'english\x00'
account creation timestamp b'YZ\x85f'
b'\x00\x00\x00\x00'
b'\x01\x00\x00\x00'
b'1\x03\x00\x00'
b'\n\x00\x00\x00'
b'\x00\x00\x00\x00')"""

# protocol 65557: 871 is first version
(b'\x15\x00\x01\x00\xca\x1c*\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x01\x00\x00ben\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0012345\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb4\x03\xa8\xc0\x00\x02\x00\x80benben\x00\x01\xb4\x03\xa8\xc0\xc0\xa8\x03\xb4\xc0\xa8\x03\xb4\xa0i\xc0\xa8\x03\xb4\xa0i\xa8\xf6\xbd\x12\xa8\xa1\x94\x83\xd9\x8fro\xa0\xa1\x1d\x86\x00\x19T\x15\x93\xde\xe2\x00\x00\x8f1W\x94\xde\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8u#\x888\xac\x82\xfb\x894\xe5\t\xa6\xe1\xf0\r\x00R\x00`\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x00\xc0\xa8\x03\xb4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
 b'test@test.com\x00'
 b'english\x00'
 b'YZ\x85f'
 b'\x00\x00\x00\x00'
 b'\x01\x00\x00\x00'
 b'g\x03\x00\x00'
 b'\x00\x00\x00\x00'
 b'\x00\x00\x00\x00')

# protocol 65558:
"""packet = ( protocol b"\x16\x00\x01\x00"
private ip b"\xca\x1c"
public ip b"*\xf2"
steamid b"\x00\x00\x00\x00\x00\x00\x00\x00"
ticket bound to ip / cookie b"\x00\x00\x00\x00"
ticket length b"\x8a\x01\x00\x00"
b"ben\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
b"12345\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
b"test@test.com\x00"
b"english\x00"
account creation timestamp b"YZ\x85f"
b"\x00\x00\x00\x00"
version known b"\x01\x00\x00\x00"
client version b"\xbd\x03\x00\x00"
cellid?? b"\n\x00\x00\x00"
last sessionid b"\x00\x00\x00\x00"
remember password b"\x01\x00")

print(len(b"\xb4\x03\xa8\xc0\x00\x02\x00\x80benben\x00\x01\xb4\x03\xa8\xc0\xc0\xa8\x03\xb4\xc0\xa8\x03\xb4\xa0i\xc0\xa8\x03\xb4\xa0i\xa8\xf6\xbd\x12\xa8\xa1\x94\x83\xd9\x8fro\xa0\xa1\x1d\x86\x00\xf0K\x98}\xde\xe2\x00\x00f)\xda~\xde\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xacy\x08\xdc\xfcp\xb1\xbe|6y\xab\xdbf\xbc'\x00R\x00`\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x00\xc0\xa8\x03\xb4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"))
"""