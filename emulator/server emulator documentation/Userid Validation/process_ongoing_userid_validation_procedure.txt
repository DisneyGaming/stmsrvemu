***!!!these packets are all part of ongoing userid ticket validation
	 and they're usage is determined by a switch statement of pvalidationcontext->m_eState

state 0:
	Seems to be for retrieving the encryption info, might be wrong

userid validation command 1:
	steam process ongoing userID Ticket Validation, recieve from server first
	appears to only be the payload
	**it is an aes encrypted buffer**
recv from server:
	data 	- size 4u
	data 	- size 2u
	data 	- size 4u
	data 	- size 2u
	data 	- size 4u
	data 	- size 2u, probably the size of the gap below
	gap	
	--if message isnt fully consume/read--
	data	- size 2u
	

userid validation command 2:
	steam process ongoing userID Ticket Validation, send encrypted payload to server
	**it is an aes encrypted buffer**
send to server:
	u32	- size of full message
	u8	- 0x12, message command byte
	u32
	u32
	u32
	data - this data seems to be a copy of the gap from the previous message
	goes on to state 1
state 1:
	appears to be socket prep and bsltime initialization
	this state can change the state to 4 or 5 depending on 4 unknown variables
	then moves to state 2 case as there is no break
state 2:
	connects to the validation server
	if connect fails, state gets set to 5 unless wsagetlasterror == 10035, state is set to 6 and returns from function
	else state gets switched to 7
	then we move on to state 3 case as there is no break
state 3:
	loads the ticket validator ip's into the validationcontext struct's socket->address
	then moves on to state 4, there is no break
state 4
	seems to set a timeout and calls select()
	goes to state 5
state 5
userid validation command 3:
send to server:
	u8	- 0x00, message command byte
	u32 	- 0x04 always 
	u32
	goes to state 6
state 6:
	things getting weird up in here...
	we recieve a buffer using normal winsock2 recv()
	recieved from server:
		u8 - single byte
	move onto...state 8? what aboot state 7, eh?
state 8:
	recieved another buffer using winsock2 recv()
	recieved from server:
		u32
	go to state 9
state 9 and state 10:
	sends an unknown sized buffer using winsock2 send()
	although in case 9, state gets set to 8
	and case 10, state gets set to 13
state 11:
	recieved a buffer using winsock2 recv()
	recieved from server:
		u16
	state gets set to 14
	then we return from function with value '23'
state 12:
	recieve a buffer using winsock2 recv()
	(no processing..??)
	set state to 15
	then we return from function with value '23'
state 13:
	recieve from server(normal, non recv()):
		u32
		u8
	**at this point there is a check on validationcontext->m_RSAClientMsgDecryptor
	  if it is false we parse the next section, otherwise we skip:
		data 	- size: u8
		u16
		data	- size: u8
	**end byteC check**
		gap
	set state to 16 
	return with value '23'
state 14:
	does not deal with any packets, just clockskew and such
state default:
	simple error code exception
