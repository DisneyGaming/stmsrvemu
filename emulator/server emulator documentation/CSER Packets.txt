Cser server is the server used for crash reports and some client statistics (and apparently the hardware survey)

The generic CSER packet structure is as follows:
<command> <payload>
**please note that virtual steam server does not send a response back to the client**
**CSER Ice decryption keys: (taken from virtual steam server)
	8 byte ice key for q command: 0x36 0xAF 0xA5 0x05 0x4C 0xFB 0x1D 0x71
	8 byte ice key for g command: 0x1B 0xC8 0x0D 0x0E 0x53 0x2D 0xB8 0x36
	8 byte ice key for o command: 0xC8 0x91 0xFF 0x95 0xC3 0xBE 0x6C 0xF3
								     ^this byte is variable, seen 0x0A in cstrike bug report

Command:
	Application installation statistics
Sent to server:
	'a'						<- single byte
	<protocol version>			<- single byte always 1
	<appid>					<- 4 bytes id of application
	<duration>					<- 4 bytes in time seconds?
	<is downloading>			<- single byte, if 1 the duration is
							   length of download time in seconds. if 0 duration 
							   is extraction time in seconds, if > 1 then it is an 
							   considered an unknown action duration
	<# of gcf's downloaded>		<- single byte, used for iteration of key/pair
	<content serverip address>		<- 4 bytes, use # of gcf to iterate until no more ip's
	
	
Expected from server to client:
	none? or 0x00? or most likely 'b'


Command:
	Steam Client statistics
Sent to server:
	'e'						<- single byte
Expected from server to client:
	none? 0x00? or most likely 'f'

Command:
	Upload Encrypted Data (can be anything)
	**partially encrypted using ICE keys** 
Sent to server:
	'q'						<- single byte
	<protocol version:0x01> 		<- 4 bytes cser upload data protocol version, version is 1 according to 2007 leaked code
	<encrypted data length> 		<- u16 encrypted stats payload
	--encrypted payload below----
	<corruption id> 			<- single byte random id
	<protocol data version: 0x01> 	<- single byte
	<table name>				<- null terminated string, no more than 40 bytes
	<number of key/value pairs>	<- 4 bytes number of pairs to iterate through
	--value payload below--------
	<key>						<- null terminated string, no more than 32 bytes
	<value>					<- null terminated string, no more than 128 bytes
Expected from server to client:
	'r' 						<- 'acknowledge upload data' single byte
	<bool>					<- 4 bytes true/okey false/error


Command:
	client crash report
Sent to server:
	'c'						<- single byte
Expected from server to client:
	none? 0x00? most likely 'd'

Command:
	(Unknown)
	**from Virtual steam server**
Sent to server:
	'i'						<- single byte
Expected from server to client:
	none? 0x00? most likely 'j'

Command:
	encrypted app stats
Sent to server:
	'u'						<- single byte
Expected from server to client:
	none? 0x00? most likely 'v'
	
Command:
	bug report
Sent to server:
	'o'						<- single byte
Expected from server to client:
	'p'						<- bug report acknowledgement, single byte

Command:
	game statistics report
Sent to server:
	'k'						<- single byte
Expected from server to client:
	'l'

Command:
	phone home
Sent to server:
	'm'						<- single byte
Expected from server to client:
	'n'
	
Command:
	Hardware survey
Sent to server:
	'g'						<- single byte
-----encrypted payload-----
Expected from server to client:
	'h'						<- example: "\xFF\xFF\xFF\xFF\x68\x01"

