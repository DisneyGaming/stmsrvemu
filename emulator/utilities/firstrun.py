import os
import logging
import subprocess
import sys
import re
import globalvars
from config import save_config_value, get_config
from utils import generate_secure_password

log = logging.getLogger("init")
configs = get_config()


def restart_script():
    log.info("Restarting Server...")

    if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
        # For compiled executables
        os.execv(globalvars.ORIGINAL_PYTHON_EXECUTABLE, [globalvars.ORIGINAL_PYTHON_EXECUTABLE] + globalvars.ORIGINAL_CMD_ARGS[1:])
    else:
        # For scripts run from source
        # If the script is run with a specific Python interpreter, use that
        subprocess.call([globalvars.ORIGINAL_PYTHON_EXECUTABLE] + globalvars.ORIGINAL_CMD_ARGS)

def check_initialization():
    log.info("Server not initialized. Running setup...")
    prompt_setup_server()

def prompt_startover():
    print("")
    print("Would you like to:")
    print("1.) Start over")
    print("2.) Continue launching the server")
    choice = input("Enter your choice (1/2): ").strip()

    if choice == "1":
        prompt_setup_server()
    elif choice == "2":
        directory = configs['configsdir'] + '/'
        os.makedirs(directory, exist_ok = True)  # Ensure the directory exists
        initialized_flag_path = os.path.join(directory, '.initialized')

        # Create an empty .initialized file
        with open(initialized_flag_path, 'w') as file:
            pass  # Just create the file, no need to write anything
        restart_script()
    else:
        print("Invalid choice. Please enter 1 or 2.")
        prompt_startover()  # Re-prompt the user if the input is invalid.

def prompt_setup_server():
    actualhost = ''
    print("")
    print("")
    print("-----------First Run Server Initialization & Setup-----------")
    print("")
    print("Please select the database you wish to use:")
    print("1.) Built-in MariaDB database")
    print("2.) External MariaDB database")
    print("Enter your choice (default 1): ", end = "")

    choice = input().strip() or "1"
    if choice not in ["1", "2"]:
        print("Invalid choice, defaulting to 1.) Built-in MySQL database")
        choice = "1"
        save_config_value('use_builtin_mysql', 'true')
    if choice == "2":
        print("")
        print("Please enter the IP address or domain name of the external MySQL database: ", end = "")
        dbhost = input().strip() or "127.0.0.1"
        save_config_value('database_host', dbhost)
        save_config_value('use_builtin_mysql', 'false')
        actualhost = dbhost
        # initialized_flag_path = "files/configs/.initialized"
        # with open(initialized_flag_path, 'w') as file:
        #     file.write('1')
    else:
        save_config_value('database_host', configs['server_ip'])
        actualhost = configs['server_ip']

    if choice == "1":
        print("")
        print("Please select a port for the database (default 3306): ", end = "")
    elif choice == "2":
        print("")
        print("Please enter the database port (default 3306): ", end = "")
    dbport = input().strip() or "3306"
    try:
        int_test = int(dbport)
        save_config_value('database_port', dbport)
    except ValueError:
        print(f"Invalid port number. Defaulting to 3306.")
        save_config_value('database_port', "3306" )
        dbport = "3306"

    # Get database username
    if choice == "1":
        print("")
        dbusername = input("Please select a database username (leave blank for default: stmserver): ").strip()
    elif choice == "2":
        print("")
        dbusername = input("Please enter the database username: ").strip()
    if not dbusername:
        dbusername = "stmserver"
    # save the new config to emulator.ini
    save_config_value('database_username', dbusername)

    # Get password for database user
    if choice == "1":
        print("")
        dbpassword = input("Create the desired password for the database user (leave blank for default: autogenerated): ").strip()
        if not dbpassword:
            dbpassword = generate_secure_password(8)
            log.info(f"Autogenerated password: {dbpassword}")
    elif choice == "2":
        print("")
        dbpassword = input("Please enter the database password: ").strip()
        if not dbpassword:
            dbpassword = "stmserver"
            print(f"No password provided, defaulting to stmserver")
    save_config_value('database_password', dbpassword)

    # Get the name of the database
    print("")
    dbscheme = input("Please enter the name of the database you would like the server to use (leave blank for default: stmserver): ").strip()
    if not dbscheme:
        dbscheme = "stmserver"
    save_config_value('database', dbscheme)
    print("")
    log.info("Configurations Saved..")
    # Example usage
    update_php_database_config('files/webserver/webroot/include/global.php',
                               host=f'{actualhost}:{int_test}',
                               dbname=f'{dbscheme}',
                               username=f'{dbusername}',
                               password=f'{dbpassword}')

    prompt_startover()


def update_php_database_config(file_path, host, dbname, username, password):
    # Normalize the file path for cross-platform compatibility
    file_path = os.path.normpath(file_path)

    # Define regex patterns for each variable with inline comments to match the PHP structure
    patterns = {
            'host':    r"\$host\s*=\s*'([^']*)';\s*// Your database domain/ip",
            'dbname':  r"\$dbname\s*=\s*'([^']*)';\s*// Your database name",
            'username':r"\$username\s*=\s*'([^']*)';\s*// Your database username",
            'password':r"\$password\s*=\s*'([^']*)';\s*// Your database password"
    }

    # Define replacement templates based on the parameter values
    replacements = {
            'host':    f"$host = '{host}'; // Your database domain/ip",
            'dbname':  f"$dbname = '{dbname}'; // Your database name",
            'username':f"$username = '{username}'; // Your database username",
            'password':f"$password = '{password}'; // Your database password"
    }

    # Read the file content
    try:
        with open(file_path, 'r') as file:
            file_content = file.read()
    except FileNotFoundError:
        log.warning(f"{file_path} Not found, Steam Community not configured")
        return
    except Exception as e:
        log.error(f"Failed to read file: {e}")
        return

    # Track whether any modifications are made
    modified = False

    # Check each variable and replace if there's a mismatch
    for var_name, pattern in patterns.items():
        match = re.search(pattern, file_content)

        if match:
            current_value = match.group(1)
            new_value = locals()[var_name]
            # Only replace if the values don't match
            if current_value != new_value:
                #print(f"[INFO] Updating {var_name} from '{current_value}' to '{new_value}'")
                file_content = re.sub(pattern, replacements[var_name], file_content)
                modified = True
        else:
            log.warning(f"Pattern for {var_name} not found in file.")

    # If modifications were made, rewrite the file with updated content
    if modified:
        try:
            with open(file_path, 'w') as file:
                file.write(file_content)
            log.info("Community global.php file updated successfully with new configurations.")
        except Exception as e:
            log.error(f"Failed to write to file: {e}")
    else:
        log.info("No changes were necessary; file remains unmodified.")
